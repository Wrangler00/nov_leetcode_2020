We have n chips, where the position of the ith chip is position[i].

We need to move all the chips to the same position. In one step, we can change the position of the ith chip from position[i] to:

position[i] + 2 or position[i] - 2 with cost = 0.
position[i] + 1 or position[i] - 1 with cost = 1.
Return the minimum cost needed to move all the chips to the same position.

 

Example 1:


Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.
Second step: Move the chip at position 2 to position 1 with cost = 1.
Total cost is 1.
Example 2:


Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at poistion 3 to position 2. Each move has cost = 1. The total cost = 2.
Example 3:

Input: position = [1,1000000000]
Output: 1
 

Constraints:

1 <= position.length <= 100
1 <= position[i] <= 10^9

//cpp my solution

class Solution {
public:
    int minCostToMoveChips(vector<int>& pos) {
        int n = pos.size();
        vector<int> data;
        map<int,int> mp;
        
        for(auto &v:pos)    mp[v]++;
    
        for(auto &k:mp) data.push_back(k.first);
        
        long ans=10000000001;
        
        for(auto &v:data){
            int odd = v%2;
            long cost=0;
            
            for(auto &k:mp){
                if(k.first!=v && k.first%2!=odd)
                    cost+=k.second;
            }
            
            ans=min(cost,ans);
        }
        
        return ans;
    }
};


//author solution -> just to count the odd and even positions and retun minimum

class Solution {
public:
    int minCostToMoveChips(vector<int>& pos) {
        int odd=0,even=0;
        
        for(auto &v:pos){
            if(v%2) ++even;
            else ++odd;
        }
        
        return min(even,odd);
    }
};
