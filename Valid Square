Given the coordinates of four points in 2D space, return whether the four points could construct a square.

The coordinate (x,y) of a point is represented by an integer array with two integers.

Example:

Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: True
 

Note:

All the input integers are in the range [-10000, 10000].
A valid square has four equal sides with positive length and four equal angles (90-degree angles).
Input points have no order.


//cpp my solution
//this is a bit complicated as i have used double unnecessary instead we can use logic of int

#define EPSILON 0.001

class Solution {
    vector<vector<int>> p;
    vector<double> d;
public:
    bool s(double a, double b) {
       return fabs(a - b) < EPSILON;
    }
    
    double dis(int i,int j){
        return sqrtf(pow(p[i][0]-p[j][0],2)+pow(p[i][1]-p[j][1],2));
    }
        
    bool cond(int i,int j,int k){
        return (s(d[i-1],d[j-1]) && s(d[k-1],sqrtf(2)*d[i-1]) && s(dis(k,i),dis(k,j)));
    }
                    
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if(p1==p2 || p2==p3 || p3==p4 || p4==p1)
            return false;
        
        p = {p1,p2,p3,p4};
        
        d = {dis(0,1),dis(0,2),dis(0,3)};
                       
        return cond(1,2,3) || cond(3,2,1) || cond(1,3,2);
    }
};

//solution using int

#define dis(i,j) (pow(p[i][0]-p[j][0],2)+pow(p[i][1]-p[j][1],2))

class Solution {
    vector<vector<int>> p;
    vector<int> d;
public:
    
    // int dis(int i,int j){
    //     return pow(p[i][0]-p[j][0],2)+pow(p[i][1]-p[j][1],2);
    // }
        
    bool cond(int i,int j,int k){
        // cout<<i<<" "<<j<<" "<<dis(0,i)<<" "<<dis(0,j)<<" "<<dis(0,k)<<" "<<dis(k,i)<<" "<<dis(k,j)<<endl;
        
        cout<<dis(0,i) <<","<< dis(0,j) <<","<< dis(0,k) <<","<< (dis(j,0) )<<","<< dis(k,i)<<"," <<dis(k,j)<<endl;
        return (dis(0,i) == dis(0,j) && dis(0,k) == (2*dis(j,0)) && dis(k,i) == dis(k,j));
    }
                    
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if(p1==p2 || p2==p3 || p3==p4 || p4==p1)
            return false;
        
        p = {p1,p2,p3,p4};
        
        // d = {dis(0,1),dis(0,2),dis(0,3)};
                       
        return cond(1,2,3) || cond(3,2,1) || cond(1,3,2);
    }
};

//less lines
class Solution {
public:
    #define dis(i,j) (pow(p[i][0]-p[j][0],2)+pow(p[i][1]-p[j][1],2))
    #define cond(i,j,k) (dis(0,i) == dis(0,j) && dis(0,k) == (2*dis(j,0)) && dis(k,i) == dis(k,j))
                
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if(p1==p2 || p2==p3 || p3==p4 || p4==p1)    return false;
        
        vector<vector<int>> p = {p1,p2,p3,p4};
        
        return cond(1,2,3) || cond(3,2,1) || cond(1,3,2);
    }
};


//more precise 5 lines code

#define d(i,j) (pow(p[i][0]-p[j][0],2)+pow(p[i][1]-p[j][1],2))
#define c(i,j,k) (d(0,i) == d(0,j) && d(0,k) == (2*d(j,0)) && d(k,i) == d(k,j))
    
class Solution {
public:            
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        if(p1==p2 || p2==p3 || p3==p4 || p4==p1)    return false;
        
        vector<vector<int>> p = {p1,p2,p3,p4};
        
        return c(1,2,3) || c(3,2,1) || c(1,3,2);
    }
};
