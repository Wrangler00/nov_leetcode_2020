Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10

//cpp standard solution (was not able to do by myself)

class Solution {
    vector<vector<int>> ans;
    int sz;
public:
    void permute(vector<int> nm,int i){
        if(i==sz-1)  ans.push_back(nm);
        
        for(int j=i;j<sz;j++){
            if(i!=j && nm[i]==nm[j]) continue;
            swap(nm[i],nm[j]);
            permute(nm,i+1);
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nm) {
        sz = nm.size();
        sort(nm.begin(),nm.end());
        permute(nm,0);
        return ans;
    }
};
