The thief has found himself a new place for his thievery again. There is only one entrance to this area, called the "root." Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that "all houses in this place forms a binary tree". It will automatically contact the police if two directly-linked houses were broken into on the same night.

Determine the maximum amount of money the thief can rob tonight without alerting the police.

Example 1:

Input: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

Output: 7 
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
Example 2:

Input: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.


//cpp my solution
//using dfs memozitation , recursion.  (DP solution)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<TreeNode*,int> vis;
    unordered_map<TreeNode*,int> unvis;
public:
    int dfs(TreeNode *node,bool inc,int tot){
        if(!node) return 0;
        int l,r;
        
        if(inc){
            if(vis.find(node)!=vis.end()) return vis.at(node);
            l = dfs(node->left,!inc,tot);
            r = dfs(node->right,!inc,tot);
            tot+=l+r+node->val;
            
            vis[node]=tot;
        }else{
            if(unvis.find(node)!=unvis.end()) return unvis.at(node);
            l = max(dfs(node->left,!inc,tot),dfs(node->left,inc,tot));
            r = max(dfs(node->right,!inc,tot),dfs(node->right,inc,tot));
            tot+=l+r;
            
            unvis[node]=tot;
        }
        
        return tot;
    }
    int rob(TreeNode* root) {
        return max(dfs(root,true,0),dfs(root,false,0));
    }
};


//shorter code

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    unordered_map<TreeNode*,int> vis[2];
public:
    int dfs(TreeNode *node,bool inc,int tot){
        if(!node) return 0;
        if(vis[inc].find(node)!=vis[inc].end()) return vis[inc].at(node);
        
        if(inc) tot+=dfs(node->left,!inc,tot)+dfs(node->right,!inc,tot)+node->val;
        else    tot+=max(dfs(node->left,!inc,tot),dfs(node->left,inc,tot))+
                max(dfs(node->right,!inc,tot),dfs(node->right,inc,tot));
        
        vis[inc][node]=tot;
        return tot;
    }
    int rob(TreeNode* root) {
        return max(dfs(root,true,0),dfs(root,false,0));
    }
};
