You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
Example 3:

Input: nums = [1,-1], k = 1
Output: [1,-1]
Example 4:

Input: nums = [9,11], k = 2
Output: [11]
Example 5:

Input: nums = [4,-2], k = 2
Output: [4]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.

 

Example 1:

Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
Example 2:

Input: nums = [1], k = 1
Output: [1]
Example 3:

Input: nums = [1,-1], k = 1
Output: [1,-1]
Example 4:

Input: nums = [9,11], k = 2
Output: [11]
Example 5:

Input: nums = [4,-2], k = 2
Output: [4]
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

//cpp my solution using priorrity queue (max heap)
//very very slow (though accepted)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        priority_queue <int> pq;
        vector<int> ans;
        int sz = nums.size();
        unordered_map<int,int> mp;
        
        for(int i=0;i<k;i++){
            mp[nums[i]]++;
            pq.push(nums[i]);
        }
        ans.push_back(pq.top());
        
        for(int i=k;i<sz;i++){
            mp[nums[i-k]]--;
            
            while(!pq.empty() && mp.at(pq.top())==0)    pq.pop();
            pq.push(nums[i]);
            
            ans.push_back(pq.top());
            mp[nums[i]]++;
        }
        
        return ans;
    }
};


//cpp using deque
//learned from geeks for geeks

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        int sz = nums.size(),i;
        
        deque<int> dq(k);
        
        for(i=0;i<k;i++){
            while(!dq.empty() && nums[i]>=nums[dq.back()])  dq.pop_back();
            dq.push_back(i);
        }
        ans.push_back(nums[dq.front()]);
        
        for(;i<sz;i++){
            while(!dq.empty() && dq.front()<=i-k)   dq.pop_front();
            while(!dq.empty() && nums[i]>=nums[dq.back()])  dq.pop_back();
            
            dq.push_back(i);
            ans.push_back(nums[dq.front()]);
        }
        return ans;
    }
};


//solution 2 -> optimization (using only one loop)

class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int sz = nums.size();
        vector<int> ans;
        deque<int> dq(k);
        
        for(int i=0;i<sz;i++){
            while(!dq.empty() && dq.front()<=i-k)   dq.pop_front();
            while(!dq.empty() && nums[i]>=nums[dq.back()])  dq.pop_back();
            
            dq.push_back(i);
            if(i>=k-1)    ans.push_back(nums[dq.front()]);
        }
        
        return ans;
    }
};
