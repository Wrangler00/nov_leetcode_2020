Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100

//cpp not my solution
//using DP O(sum*n)
//very slow solution

static int fastio=[](){
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}();

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int sum=0;
        
        int sz = nums.size();
        
        for(auto &v:nums)   sum+=v;
        
        if(sum%2)   return false;
        
        sum = sum/2;
        
        vector<vector<bool>> part(sum+1,vector<bool>(sz+1,true));
        
        for(int i=1;i<=sum;i++)
            part[i][0]=false;
        
        for(int i=1;i<=sum;i++){
            for(int j=1;j<=sz;j++){
                part[i][j] = part[i][j-1];
                if(i>=nums[j-1])
                    part[i][j] = part[i][j] || part[i-nums[j-1]][j-1];
            }
        }
        
        return part[sum][sz];
    }
};



//A 8ms solution using bitset and dp solution
//took from discussions (much optimized)

static int fastio=[](){
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    return 0;
}();

class Solution {
public:
    bool canPartition(vector<int>& nums) {
        if (nums.size() <= 1) return false;
        int sum = accumulate(begin(nums), end(nums), 0);
        if (sum % 2) return false;
        sum /= 2;
        bitset<10001> dp = 1;
        for (int n : nums) {
            dp |= dp << n;
        }
        return dp[sum];
    }
};
